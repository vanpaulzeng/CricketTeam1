A file named report.doc or report.docx (in Microsoft Word format), report.txt (an ordinary text file), or report.pdf (in Adobe Acrobat PDF format) that contains:
o A description of the design of your implementation and why you chose it. (A couple of sentences will probably suffice, perhaps with a picture of a typical List and an empty List. Is your list circular? Does it have a dummy node? What's in your nodes?)

my list design will be like this:

1, Using double link list, each node has prev point to the previous node, and next point to the next. The head = tail = nullptr for all pointers if the list is empty.
2, If anycode will add or drop node, should always maintain head and tail changes, also perform head and tail check and update if need to add node at there.
3, Implement lastName check then firstName check by alphabate order, and follow spec rules.  Using compareLast, compareFirst variables to record if parameter values is less of more than the node values in the list (for example: if p->lastname > lastname, then comparelast will > 0, then need to add node in front of p). And use these 2 values to find the correct position to add new nodes. And this is the most important func and is the fundation for other funcs.
4, Once add node done, start using to implement other functions as well. Mostly follow spec rules will be fine.
5, implement merge func, since merge is not a CricketTeam class member, need to use a for loop from 0 to cricketerCount() to loop each team members,  use class member checkTeamForCricketer() to get value from each team member, add each odOne in odJoined, then loop odTwo. Now use searchForCricketer(...) member to verify if exisit and correct, if no good use releaseCricketer() to remove it from odResult.
6, implement checkCricketer(), the main login to deal with it is using string member find to check it name include "*" and find the position if exist. Follow spec rules to get those member to match the test call.




o A brief description of notable obstacles you overcame.

o Pseudocode for non-trivial algorithms (e.g., CricketTeam::releaseCricketer and mergeCricketers)
    releaseCricketer(firstName, lastName){

    find head in p
    loop while p not null
    check p->next data lastName_firstName with input lastName+firstName
    match, use killMe point to point the p-next node, the break the loop, and use a killMe point to remember the address
    set p->next to point to the killMe->next, then ready to delete killMe.
    
 
 
    mergeCricketers(const CricketTeam & odOne,const CricketTeam & odTwo,CricketTeam & odJoined){
    use checkTeamForCricker to get member i,
    use a for loop let i from 0 to cricketCount() to add all members into odJoined list.
    use another for loop do the same thing, follow spec logic to check if the node from odTwo need to add into odJoined or not
    make sure use release func to drop the wrong node in the odJoined.
    use testResult to remember/update the return bool value.
    

o A list of test cases that would thoroughly test the functions. Be sure to indicate the purpose of the tests. For example, here's the beginning of a presentation in the form of code:


#include <iostream>
#include <string>
#include "CricketTeam.h"

using namespace std;

int main(int argc, const char * argv[])
{
    
    
    /* Paul's own test case
     CricketTeam rajasthanRoyals;
     rajasthanRoyals.addCricketer ("Ravichandran", "Ashwin", 99);
     rajasthanRoyals.addCricketer ("Sanju", "Samson", 11);
     rajasthanRoyals.addCricketer ("Qavichandran", "Arhwin", 99);
     rajasthanRoyals.addCricketer ("Pavichandran", "Bvhwin", 99);
     rajasthanRoyals.addCricketer ("Qavichandran", "Ashwim", 98);
     rajasthanRoyals.addCricketer ("Jos", "Buttler", 63);
     rajasthanRoyals.addCricketer ("Yashavi", "Jaiswal", 19);
     rajasthanRoyals.addCricketer ("Shimron", "Hetmeyer", 189);
     rajasthanRoyals.addCricketer ("Trent", "Boult", 18);
     rajasthanRoyals.addCricketer ("Savichandran", "Ashwin", 99);
     rajasthanRoyals.addCricketer ("Yuzvendra", "Chahal", 3);
     
     
     rajasthanRoyals.addOrSubstitute("Qavichandran", "Ashwim", 100);
     rajasthanRoyals.substituteCricketer("Qavichandran", "Ashwim", 130);
     
     
     rajasthanRoyals.printCricket();
     
     cout << rajasthanRoyals.cricketerCount();
     
     return 0;
     
     
     */
    
    /*/ test 1 passed
     CricketTeam rajasthanRoyals;
     rajasthanRoyals.addCricketer ("Sanju", "Samson", 11);
     rajasthanRoyals.addCricketer ("Jos", "Buttler", 63);
     rajasthanRoyals.addCricketer ("Yashavi", "Jaiswal", 19);
     rajasthanRoyals.addCricketer ("Shimron", "Hetmeyer", 189);
     rajasthanRoyals.addCricketer ("Trent", "Boult", 18);
     rajasthanRoyals.addCricketer ("Ravichandran", "Ashwin", 99);
     rajasthanRoyals.addCricketer ("Yuzvendra", "Chahal", 3);
     
     //rajasthanRoyals.printCricket();
     //cout << rajasthanRoyals.cricketerCount() <<"   \n";
     
     for (int n = 0; n < rajasthanRoyals.cricketerCount(); n++)
     {
     string first;
     string last;
     int val;
     rajasthanRoyals.checkTeamForCricketer (n, first, last, val);
     cout << first << " " << last << " " << val << endl;
     }
     */
    
    
    /* test 2 passed
     CricketTeam mumbaiIndians;
     mumbaiIndians.addCricketer("Rohit", "Sharma", 36.25);
     mumbaiIndians.addCricketer("Suryakumar", "Yadav", 32.75);
     assert(!mumbaiIndians.rosteredOnCricketTeam ("",""));
     mumbaiIndians.addCricketer("Jasprit", "Bumrah", 29.5);
     mumbaiIndians.addCricketer("", "", 21.0);
     mumbaiIndians.addCricketer("Cameron", "Green", 24.0);
     mumbaiIndians.printCricket();
     
     
     assert(mumbaiIndians.rosteredOnCricketTeam ("", ""));
     mumbaiIndians.releaseCricketer("Jasprit", "Bumrah");
     assert(mumbaiIndians.cricketerCount() == 4
     && mumbaiIndians.rosteredOnCricketTeam("Rohit", "Sharma")
     && mumbaiIndians.rosteredOnCricketTeam ("Suryakumar", "Yadav")
     && mumbaiIndians.rosteredOnCricketTeam ("Cameron", "Green")
     && mumbaiIndians.rosteredOnCricketTeam ("", ""));
     
     */
    
    
    
    
    
    /*/ Test 3  passed
     CricketTeam mumbaiIndians;
     mumbaiIndians.addCricketer("Rohit", "Sharma", 36.25);
     mumbaiIndians.addCricketer("Suryakumar", "Yadav", 32.75);
     assert(!mumbaiIndians.rosteredOnCricketTeam ("",""));
     mumbaiIndians.addCricketer("Jasprit", "Bumrah", 29.5);
     mumbaiIndians.addCricketer("", "", 21.0);
     mumbaiIndians.addCricketer("Cameron", "Green", 24.0);
     assert(mumbaiIndians.rosteredOnCricketTeam ("", ""));
     mumbaiIndians.releaseCricketer("Jasprit", "Bumrah");
     assert(mumbaiIndians.cricketerCount() == 4 && mumbaiIndians.rosteredOnCricketTeam("Rohit", "Sharma") && mumbaiIndians.rosteredOnCricketTeam ("Suryakumar", "Yadav") && mumbaiIndians.rosteredOnCricketTeam ("Cameron","Green")
     && mumbaiIndians.rosteredOnCricketTeam ("", ""));
     //assert(mumbaiIndians.searchForCricketer ("Cameron", "Green", 26.0) == false);
     */
    
    
    /*/ Paul's Merge own test case
     CricketTeam rajasthanRoyals1;
     rajasthanRoyals1.addCricketer("Ravichandran", "Ashwin", 99);
     rajasthanRoyals1.addCricketer ("Sanju", "Samson", 11);
     rajasthanRoyals1.addCricketer ("Qavichandran", "Arhwin", 99);
     rajasthanRoyals1.addCricketer ("Pavichandran", "Bvhwin", 99);
     rajasthanRoyals1.addCricketer ("Qavichandran", "Ashwim", 98);
     rajasthanRoyals1.addCricketer ("Jos", "Buttler", 63);
     rajasthanRoyals1.addCricketer ("Yashavi", "Jaiswal", 19);
     rajasthanRoyals1.addCricketer ("Shimron", "Hetmeyer", 189);
     rajasthanRoyals1.addCricketer ("Trent", "Boult", 18);
     rajasthanRoyals1.addCricketer ("Savichandran", "Ashwin", 99);
     rajasthanRoyals1.addCricketer ("Yuzvendra", "Chahal", 3);
     
     CricketTeam rajasthanRoyals2;
     rajasthanRoyals2.addCricketer ("Sanju", "Zamson", 11);
     rajasthanRoyals2.addCricketer ("Ravichandran", "Adhwin", 97);
     
     rajasthanRoyals2.addCricketer ("Qavichandran", "Arhwin", 97);
     
     
     //rajasthanRoyals1.printCricket();
     //rajasthanRoyals2.printCricket();
     
     CricketTeam odJoined;
     
     mergeCricketers(rajasthanRoyals1, rajasthanRoyals2, odJoined);
     odJoined.printCricket();
     */
    
    
    /* Edwin's merge test case 1 passed
    CricketTeam rajasthanRoyals1, rajasthanRoyals2, rajasthanRoyals3;
    
     
    
    rajasthanRoyals1.addCricketer ("Trent", "Boult" ,18);
    rajasthanRoyals1.addCricketer ("Tim", "David", 8);
    rajasthanRoyals1.addCricketer ( "Rashid", "Khan" ,19);
    
    rajasthanRoyals2.addCricketer ("Trent", "Boult", 18 );
    rajasthanRoyals2.addCricketer ( "Tim", "Southee" ,38);
    rajasthanRoyals2.addCricketer ("Kane" ,"Williamson", 22);
    
    CricketTeam odJoined;
    
    mergeCricketers(rajasthanRoyals1, rajasthanRoyals2, odJoined);
    odJoined.printCricket();
    
     */
    
    
    /* Edwin's merge test case 2 passed

    rajasthanRoyals1.addCricketer ("Quinton", "DeCock" ,12);
    rajasthanRoyals1.addCricketer ("Faf", "DuPlessis" ,17);
    rajasthanRoyals1.addCricketer ("Kagiso", "Rabada", 25);

    rajasthanRoyals2.addCricketer ("Faf", "DuPlessis", 13);
    rajasthanRoyals2.addCricketer ("Virat", "Kohli" ,18);
    
    CricketTeam odJoined;
    
    mergeCricketers(rajasthanRoyals1, rajasthanRoyals2, odJoined);
    odJoined.printCricket();
     
     */
     
     
     /*/* Edwin's check test case 1, passed
      CricketTeam rajasthanRoyals1, rajasthanRoyals2;
      
      rajasthanRoyals1.addCricketer ( "Rahul", "Dravid", 15);
      rajasthanRoyals1.addCricketer ("David", "Miller", 13);
      rajasthanRoyals1.addCricketer ( "Rahul", "Tewatia", 9 );
      rajasthanRoyals1.addCricketer ("David", "Wiese", 96);
     
     
      CricketTeam odResult;
    
    checkCricketers("David","*",rajasthanRoyals1,odResult);
    odResult.printCricket();
    */
    
    
    
    // Edwin's check test 2  passed
    CricketTeam rajasthanRoyals3;
    CricketTeam odResult2;
    
    rajasthanRoyals3.addCricketer ( "Darren", "Bravo", 46);
    rajasthanRoyals3.addCricketer ("Dwayne", "Bravo", 47);
    rajasthanRoyals3.addCricketer ( "Kieron", "Pollard", 55 );
    rajasthanRoyals3.addCricketer ( "Nicolas", "Pooran", 29);
   
   
   
  
  checkCricketers("*","*",rajasthanRoyals3,odResult2);
  odResult2.printCricket();
  
     
    

    
    
    
    
    // return 0;
}


// Test case 2

#include <iostream>
#include <string>
#include "CricketTeam.h"
#include <type_traits>
#define CHECKTYPE(f, t) { auto p = (t)(f); (void)p; }



int main1(int argc, const char * argv[])
{
    
    
    /*
     CricketTeam rajasthanRoyals;
     rajasthanRoyals.addCricketer ("Ravichandran", "Ashwin", 99);
     rajasthanRoyals.addCricketer ("Sanju", "Samson", 11);
     rajasthanRoyals.addCricketer ("Qavichandran", "Arhwin", 99);
     rajasthanRoyals.addCricketer ("Pavichandran", "Bvhwin", 99);
     rajasthanRoyals.addCricketer ("Qavichandran", "Ashwim", 98);
     rajasthanRoyals.addCricketer ("Jos", "Buttler", 63);
     rajasthanRoyals.addCricketer ("Yashavi", "Jaiswal", 19);
     rajasthanRoyals.addCricketer ("Shimron", "Hetmeyer", 189);
     rajasthanRoyals.addCricketer ("Trent", "Boult", 18);
     rajasthanRoyals.addCricketer ("Savichandran", "Ashwin", 99);
     rajasthanRoyals.addCricketer ("Yuzvendra", "Chahal", 3);
     
     
     rajasthanRoyals.addOrSubstitute("Qavichandran", "Ashwim", 100);
     rajasthanRoyals.substituteCricketer("Qavichandran", "Ashwim", 130);
     
     
     rajasthanRoyals.printCricket();
     
     cout << rajasthanRoyals.cricketerCount();
     
     return 0;
     
     
     */
    
    /*/ test 1 passed
     CricketTeam rajasthanRoyals;
     rajasthanRoyals.addCricketer ("Sanju", "Samson", 11);
     rajasthanRoyals.addCricketer ("Jos", "Buttler", 63);
     rajasthanRoyals.addCricketer ("Yashavi", "Jaiswal", 19);
     rajasthanRoyals.addCricketer ("Shimron", "Hetmeyer", 189);
     rajasthanRoyals.addCricketer ("Trent", "Boult", 18);
     rajasthanRoyals.addCricketer ("Ravichandran", "Ashwin", 99);
     rajasthanRoyals.addCricketer ("Yuzvendra", "Chahal", 3);
     
     //rajasthanRoyals.printCricket();
     //cout << rajasthanRoyals.cricketerCount() <<"   \n";
     
     for (int n = 0; n < rajasthanRoyals.cricketerCount(); n++)
     {
     string first;
     string last;
     int val;
     rajasthanRoyals.checkTeamForCricketer (n, first, last, val);
     cout << first << " " << last << " " << val << endl;
     }
     */
    
    
    /* test 2 passed
     CricketTeam mumbaiIndians;
     mumbaiIndians.addCricketer("Rohit", "Sharma", 36.25);
     mumbaiIndians.addCricketer("Suryakumar", "Yadav", 32.75);
     assert(!mumbaiIndians.rosteredOnCricketTeam ("",""));
     mumbaiIndians.addCricketer("Jasprit", "Bumrah", 29.5);
     mumbaiIndians.addCricketer("", "", 21.0);
     mumbaiIndians.addCricketer("Cameron", "Green", 24.0);
     mumbaiIndians.printCricket();
     
     
     assert(mumbaiIndians.rosteredOnCricketTeam ("", ""));
     mumbaiIndians.releaseCricketer("Jasprit", "Bumrah");
     assert(mumbaiIndians.cricketerCount() == 4
     && mumbaiIndians.rosteredOnCricketTeam("Rohit", "Sharma")
     && mumbaiIndians.rosteredOnCricketTeam ("Suryakumar", "Yadav")
     && mumbaiIndians.rosteredOnCricketTeam ("Cameron", "Green")
     && mumbaiIndians.rosteredOnCricketTeam ("", ""));
     
     */
    
    
    
    
    
    /*/ Test 3  passed
     CricketTeam mumbaiIndians;
     mumbaiIndians.addCricketer("Rohit", "Sharma", 36.25);
     mumbaiIndians.addCricketer("Suryakumar", "Yadav", 32.75);
     assert(!mumbaiIndians.rosteredOnCricketTeam ("",""));
     mumbaiIndians.addCricketer("Jasprit", "Bumrah", 29.5);
     mumbaiIndians.addCricketer("", "", 21.0);
     mumbaiIndians.addCricketer("Cameron", "Green", 24.0);
     assert(mumbaiIndians.rosteredOnCricketTeam ("", ""));
     mumbaiIndians.releaseCricketer("Jasprit", "Bumrah");
     assert(mumbaiIndians.cricketerCount() == 4 && mumbaiIndians.rosteredOnCricketTeam("Rohit", "Sharma") && mumbaiIndians.rosteredOnCricketTeam ("Suryakumar", "Yadav") && mumbaiIndians.rosteredOnCricketTeam ("Cameron","Green")
     && mumbaiIndians.rosteredOnCricketTeam ("", ""));
     //assert(mumbaiIndians.searchForCricketer ("Cameron", "Green", 26.0) == false);
     */
    
    
    /*/  Merge own test case
     CricketTeam rajasthanRoyals1;
     rajasthanRoyals1.addCricketer("Ravichandran", "Ashwin", 99);
     rajasthanRoyals1.addCricketer ("Sanju", "Samson", 11);
     rajasthanRoyals1.addCricketer ("Qavichandran", "Arhwin", 99);
     rajasthanRoyals1.addCricketer ("Pavichandran", "Bvhwin", 99);
     rajasthanRoyals1.addCricketer ("Qavichandran", "Ashwim", 98);
     rajasthanRoyals1.addCricketer ("Jos", "Buttler", 63);
     rajasthanRoyals1.addCricketer ("Yashavi", "Jaiswal", 19);
     rajasthanRoyals1.addCricketer ("Shimron", "Hetmeyer", 189);
     rajasthanRoyals1.addCricketer ("Trent", "Boult", 18);
     rajasthanRoyals1.addCricketer ("Savichandran", "Ashwin", 99);
     rajasthanRoyals1.addCricketer ("Yuzvendra", "Chahal", 3);
     
     CricketTeam rajasthanRoyals2;
     rajasthanRoyals2.addCricketer ("Sanju", "Zamson", 11);
     rajasthanRoyals2.addCricketer ("Ravichandran", "Adhwin", 97);
     
     rajasthanRoyals2.addCricketer ("Qavichandran", "Arhwin", 97);
     
     
     //rajasthanRoyals1.printCricket();
     //rajasthanRoyals2.printCricket();
     
     CricketTeam odJoined;
     
     mergeCricketers(rajasthanRoyals1, rajasthanRoyals2, odJoined);
     odJoined.printCricket();
     */
    
    
    /*  merge test case 1 passed
    CricketTeam rajasthanRoyals1, rajasthanRoyals2, rajasthanRoyals3;
    
     
    
    rajasthanRoyals1.addCricketer ("Trent", "Boult" ,18);
    rajasthanRoyals1.addCricketer ("Tim", "David", 8);
    rajasthanRoyals1.addCricketer ( "Rashid", "Khan" ,19);
    
    rajasthanRoyals2.addCricketer ("Trent", "Boult", 18 );
    rajasthanRoyals2.addCricketer ( "Tim", "Southee" ,38);
    rajasthanRoyals2.addCricketer ("Kane" ,"Williamson", 22);
    
    CricketTeam odJoined;
    
    mergeCricketers(rajasthanRoyals1, rajasthanRoyals2, odJoined);
    odJoined.printCricket();
    
     */
    
    
    /*  merge test case 2 passed

    rajasthanRoyals1.addCricketer ("Quinton", "DeCock" ,12);
    rajasthanRoyals1.addCricketer ("Faf", "DuPlessis" ,17);
    rajasthanRoyals1.addCricketer ("Kagiso", "Rabada", 25);

    rajasthanRoyals2.addCricketer ("Faf", "DuPlessis", 13);
    rajasthanRoyals2.addCricketer ("Virat", "Kohli" ,18);
    
    CricketTeam odJoined;
    
    mergeCricketers(rajasthanRoyals1, rajasthanRoyals2, odJoined);
    odJoined.printCricket();
     
     */
     
     
     /*/*  check test case 1, passed
      CricketTeam rajasthanRoyals1, rajasthanRoyals2;
      
      rajasthanRoyals1.addCricketer ( "Rahul", "Dravid", 15);
      rajasthanRoyals1.addCricketer ("David", "Miller", 13);
      rajasthanRoyals1.addCricketer ( "Rahul", "Tewatia", 9 );
      rajasthanRoyals1.addCricketer ("David", "Wiese", 96);
     
     
      CricketTeam odResult;
    
    checkCricketers("David","*",rajasthanRoyals1,odResult);
    odResult.printCricket();
    */
    
    
    /*
    //  check test 2  passed
    CricketTeam rajasthanRoyals3;
    CricketTeam odResult2;
    
    rajasthanRoyals3.addCricketer ( "Darren", "Bravo", 46);
    rajasthanRoyals3.addCricketer ("Dwayne", "Bravo", 47);
    rajasthanRoyals3.addCricketer ( "Kieron", "Pollard", 55 );
    rajasthanRoyals3.addCricketer ( "Nicolas", "Pooran", 29);
   
   
   
  
  checkCricketers("*","*",rajasthanRoyals3,odResult2);
  odResult2.printCricket();
  
     
    */

    return 0;
}



The tests were performed on a map from strings to integers:

#include "CricketTeam.h"
#include <string>
#include <iostream>
#include <cassert>
using namespace std;
void test() {
CricketTeam englandCricket;
assert(englandCricket.addCricketer("Joe", "Root", 66));
assert(englandCricket.addCricketer("Sam", "Curran", 58));
assert(englandCricket.cricketerCount() == 2);
string first, last;
int jn;
assert(englandCricket.checkTeamForCricketer(0, first, last, jn) && jn == 58);
assert(englandCricket.checkTeamForCricketer(1, first, last, jn) && (first == "Joe" && jn == 66));
return;
}
int main() {
test();
cout << "Passed all tests" << endl;
return 0;
}
